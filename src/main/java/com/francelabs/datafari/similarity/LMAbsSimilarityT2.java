package com.francelabs.datafari.similarity;

import java.util.Locale;

import com.francelabs.datafari.similarity.base.BasicStats;
import com.francelabs.datafari.similarity.base.SimilarityUniqueTermRatioBase;

/**
 * Smoothing using absolute discount, term 1 only. From Chengxiang Zhai and John
 * Lafferty. 2001. A study of smoothing methods for language models applied to
 * Ad Hoc information retrieval. In Proceedings of the 24th annual international
 * ACM SIGIR conference on Research and development in information retrieval
 * (SIGIR '01). ACM, New York, NY, USA, 334-342.
 * <p>
 * The full formula is log(1+max(f-delta,0) / (delta*du*p(w|c))) + log(delta * du / doclen)
 * with delta a parameter in [0, 1]
 * du the number of unique terms in the document
 * doclen the length of the document
 * p(w|c) the probability that the current word is generated by the corpus language model
 * 
 * The opposite of the second term is computed in this class. Lucene does not allow negative
 * scores, and the second term of this equation is always less than or equal to zero (you
 * always have a less or equal number of unique terms in a document than the total number 
 * of terms). That is why we return here the oposite value.
 * </p>
 * 
 * @lucene.experimental
 */
public class LMAbsSimilarityT2 extends SimilarityUniqueTermRatioBase {
    /** The &delta; parameter. */
    private final float delta;

    /** Instantiates the similarity with the provided &delta; parameter. */
    public LMAbsSimilarityT2(float delta) {
        this.delta = delta;
    }

    /** Instantiates the similarity with the default &delta; value of 2000. */
    public LMAbsSimilarityT2() {
        this(0.7f);
    }

    /**
     * Keep in mind that lucene requires the score to be:
     * - greater or equal to 0
     * - not increase when the norm (here the uniqueTermRation) increases
     * Both of those are respected by computing the opposite of the log here has:
     * -This log is always negative
     * -This log increases when the norm increses, so the opposite is a decreasing function of the norm
     * A sanity check is performed nonetheless to ensure that the outpute score is positive
     */
    @Override
    protected float score(BasicStats stats, float freq, float uniqueTermRatio) {
        float score = (float)-Math.log(uniqueTermRatio * delta);
        return score > 0.0f ? score : 0.0f;
    }

    /** Returns the &delta; parameter. */
    public float getDelta() {
        return delta;
    }

    @Override
    public String toString() {
        return String.format(Locale.ROOT, "LMAbsSimilarityT2(%f)", getDelta());
    }
}
