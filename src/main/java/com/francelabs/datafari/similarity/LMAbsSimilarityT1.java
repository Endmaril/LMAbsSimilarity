package com.francelabs.datafari.similarity;

import java.util.Locale;

import com.francelabs.datafari.similarity.base.BasicStats;
import com.francelabs.datafari.similarity.base.LMSimilarityUniqueTermCount;

/**
 * Smoothing using absolute discount, term 1 only. From Chengxiang Zhai and John
 * Lafferty. 2001. A study of smoothing methods for language models applied to
 * Ad Hoc information retrieval. In Proceedings of the 24th annual international
 * ACM SIGIR conference on Research and development in information retrieval
 * (SIGIR '01). ACM, New York, NY, USA, 334-342.
 * <p>
 * The full formula is log(1+max(f-delta,0) / (delta*du*p(w|c))) + log(delta * du / doclen)
 * with delta a parameter in [0, 1]
 * du the number of unique terms in the document
 * doclen the length of the document
 * p(w|c) the probability that the current word is generated by the corpus language model
 * 
 * Only the first log term is computed in this class as it is not possible to get access to 
 * both du and doclen within one Similarity class.
 * </p>
 * 
 * @lucene.experimental
 */
public class LMAbsSimilarityT1 extends LMSimilarityUniqueTermCount {
    /** The &delta; parameter. */
    private final float delta;

    /** Instantiates the similarity with the provided &delta; parameter. */
    public LMAbsSimilarityT1(CollectionModel collectionModel, float delta) {
        super(collectionModel);
        this.delta = delta;
    }

    /** Instantiates the similarity with the provided &delta; parameter. */
    public LMAbsSimilarityT1(float delta) {
        this.delta = delta;
    }

    /** Instantiates the similarity with the default &delta; value of 2000. */
    public LMAbsSimilarityT1(CollectionModel collectionModel) {
        this(collectionModel, 0.7f);
    }

    /** Instantiates the similarity with the default &delta; value of 2000. */
    public LMAbsSimilarityT1() {
    this(0.7f);
  }
  
  @Override
  protected float score(BasicStats stats, float freq, float uniqueTermCount) {
    float score = stats.getBoost() * (float)(Math.log(1 + Math.max(freq - delta, 0) /
        (delta * ((LMStats)stats).getCollectionProbability() * uniqueTermCount)));
    return score > 0.0f ? score : 0.0f;
  }

  /** Returns the &delta; parameter. */
  public float getDelta() {
    return delta;
  }
  
  @Override
  public String getName() {
    return String.format(Locale.ROOT, "LMAbsSimilarityT1(%f)", getDelta());
  }
}
